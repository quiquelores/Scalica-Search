# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: search.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='search.proto',
  package='search',
  # syntax='proto3',
  serialized_pb=b'\n\x0csearch.proto\x12\x06search\"-\n\x0cIndexRequest\x12\x0f\n\x07post_id\x18\x01 \x01(\t\x12\x0c\n\x04text\x18\x02 \x01(\t\"\x1c\n\nIndexReply\x12\x0e\n\x06status\x18\x01 \x01(\x05\"\x1e\n\rSearchRequest\x12\r\n\x05query\x18\x01 \x01(\t\"\x1f\n\x0bSearchReply\x12\x10\n\x08post_ids\x18\x01 \x03(\t2u\n\x06Search\x12\x33\n\x05Index\x12\x14.search.IndexRequest\x1a\x12.search.IndexReply\"\x00\x12\x36\n\x06Search\x12\x15.search.SearchRequest\x1a\x13.search.SearchReply\"\x00\x62\x06proto3'
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_INDEXREQUEST = _descriptor.Descriptor(
  name='IndexRequest',
  full_name='search.IndexRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='post_id', full_name='search.IndexRequest.post_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='text', full_name='search.IndexRequest.text', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  # syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=69,
)


_INDEXREPLY = _descriptor.Descriptor(
  name='IndexReply',
  full_name='search.IndexReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='search.IndexReply.status', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  # syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=71,
  serialized_end=99,
)


_SEARCHREQUEST = _descriptor.Descriptor(
  name='SearchRequest',
  full_name='search.SearchRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='query', full_name='search.SearchRequest.query', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  # syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=101,
  serialized_end=131,
)


_SEARCHREPLY = _descriptor.Descriptor(
  name='SearchReply',
  full_name='search.SearchReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='post_ids', full_name='search.SearchReply.post_ids', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  # syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=133,
  serialized_end=164,
)

DESCRIPTOR.message_types_by_name['IndexRequest'] = _INDEXREQUEST
DESCRIPTOR.message_types_by_name['IndexReply'] = _INDEXREPLY
DESCRIPTOR.message_types_by_name['SearchRequest'] = _SEARCHREQUEST
DESCRIPTOR.message_types_by_name['SearchReply'] = _SEARCHREPLY

IndexRequest = _reflection.GeneratedProtocolMessageType('IndexRequest', (_message.Message,), dict(
  DESCRIPTOR = _INDEXREQUEST,
  __module__ = 'search_pb2'
  # @@protoc_insertion_point(class_scope:search.IndexRequest)
  ))
_sym_db.RegisterMessage(IndexRequest)

IndexReply = _reflection.GeneratedProtocolMessageType('IndexReply', (_message.Message,), dict(
  DESCRIPTOR = _INDEXREPLY,
  __module__ = 'search_pb2'
  # @@protoc_insertion_point(class_scope:search.IndexReply)
  ))
_sym_db.RegisterMessage(IndexReply)

SearchRequest = _reflection.GeneratedProtocolMessageType('SearchRequest', (_message.Message,), dict(
  DESCRIPTOR = _SEARCHREQUEST,
  __module__ = 'search_pb2'
  # @@protoc_insertion_point(class_scope:search.SearchRequest)
  ))
_sym_db.RegisterMessage(SearchRequest)

SearchReply = _reflection.GeneratedProtocolMessageType('SearchReply', (_message.Message,), dict(
  DESCRIPTOR = _SEARCHREPLY,
  __module__ = 'search_pb2'
  # @@protoc_insertion_point(class_scope:search.SearchReply)
  ))
_sym_db.RegisterMessage(SearchReply)


import abc
from grpc.beta import implementations as beta_implementations
from grpc.early_adopter import implementations as early_adopter_implementations
from grpc.framework.alpha import utilities as alpha_utilities
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
class EarlyAdopterSearchServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Index(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Search(self, request, context):
    raise NotImplementedError()
class EarlyAdopterSearchServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterSearchStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Index(self, request):
    raise NotImplementedError()
  Index.async = None
  @abc.abstractmethod
  def Search(self, request):
    raise NotImplementedError()
  Search.async = None
def early_adopter_create_Search_server(servicer, port, private_key=None, certificate_chain=None):
  import search_pb2
  import search_pb2
  import search_pb2
  import search_pb2
  method_service_descriptions = {
    "Index": alpha_utilities.unary_unary_service_description(
      servicer.Index,
      search_pb2.IndexRequest.FromString,
      search_pb2.IndexReply.SerializeToString,
    ),
    "Search": alpha_utilities.unary_unary_service_description(
      servicer.Search,
      search_pb2.SearchRequest.FromString,
      search_pb2.SearchReply.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("search.Search", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_Search_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import search_pb2
  import search_pb2
  import search_pb2
  import search_pb2
  method_invocation_descriptions = {
    "Index": alpha_utilities.unary_unary_invocation_description(
      search_pb2.IndexRequest.SerializeToString,
      search_pb2.IndexReply.FromString,
    ),
    "Search": alpha_utilities.unary_unary_invocation_description(
      search_pb2.SearchRequest.SerializeToString,
      search_pb2.SearchReply.FromString,
    ),
  }
  return early_adopter_implementations.stub("search.Search", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaSearchServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Index(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Search(self, request, context):
    raise NotImplementedError()

class BetaSearchStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Index(self, request, timeout):
    raise NotImplementedError()
  Index.future = None
  @abc.abstractmethod
  def Search(self, request, timeout):
    raise NotImplementedError()
  Search.future = None

def beta_create_Search_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import search_pb2
  import search_pb2
  import search_pb2
  import search_pb2
  request_deserializers = {
    ('search.Search', 'Index'): search_pb2.IndexRequest.FromString,
    ('search.Search', 'Search'): search_pb2.SearchRequest.FromString,
  }
  response_serializers = {
    ('search.Search', 'Index'): search_pb2.IndexReply.SerializeToString,
    ('search.Search', 'Search'): search_pb2.SearchReply.SerializeToString,
  }
  method_implementations = {
    ('search.Search', 'Index'): face_utilities.unary_unary_inline(servicer.Index),
    ('search.Search', 'Search'): face_utilities.unary_unary_inline(servicer.Search),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_Search_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import search_pb2
  import search_pb2
  import search_pb2
  import search_pb2
  request_serializers = {
    ('search.Search', 'Index'): search_pb2.IndexRequest.SerializeToString,
    ('search.Search', 'Search'): search_pb2.SearchRequest.SerializeToString,
  }
  response_deserializers = {
    ('search.Search', 'Index'): search_pb2.IndexReply.FromString,
    ('search.Search', 'Search'): search_pb2.SearchReply.FromString,
  }
  cardinalities = {
    'Index': cardinality.Cardinality.UNARY_UNARY,
    'Search': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'search.Search', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
